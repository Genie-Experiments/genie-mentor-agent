PLANNER_PROMPT = '''
You are a Planner Agent responsible for generating a structured query plan based on the user's input.

User Query: "{user_query}"

Define query intent using 2–3 words.
Use only the following data sources: {data_sources}

Provide a JSON object with the following structure:
{{
  "user_query": "...",
  "query_intent": "...",
  "data_sources": ["knowledgebase", "notion"],
  "query_components": [
    {{
      "id": "q1",
      "sub_query": "...",
      "source": "knowledgebase"
    }},
    {{
      "id": "q2",
      "sub_query": "...",
      "source": "notion"
    }}
  ],
  "execution_order": {{
    "nodes": ["q1", "q2"],
    "edges": [],
    "aggregation": "combine_and_summarize"
  }}
}}

Ensure the JSON is properly formatted.
'''


REFINEMENT_NEEDED_PROMPT = """
You are a refinement detector. A query plan is given below.

Determine whether it needs refinement in terms of:
- redundant or missing data sources (only use 'knowledgebase' or 'notion')
- ambiguous execution order
- unclear intent or subqueries
- inappropriate aggregation strategy

Plan:
{plan_json}

Respond with one word only: "Yes" or "No"
"""


REFINE_PLAN_PROMPT = """
You are a Refiner Agent responsible for reviewing and optimizing a query plan generated by another agent.

Here is the input plan (as JSON):
{plan_json}

Available data sources: {selected_sources}

Check for:
- redundant sources (only use the available sources listed above)
- poor execution ordering
- missing query components
- ambiguous subqueries or intent
- better aggregation strategies

Important: Only use the available data sources listed above. Do not introduce any other sources.

Reply with a JSON object:
{{
  "refined_plan": <refined JSON query plan>,
  "feedback": <what was changed and why; or 'No changes needed.'>,
  "original_plan": <original plan JSON>,
  "changes_made": [<list of specific changes made>]
}}
"""


AGGREGATE_RESULTS_PROMPT = '''
You are an assistant tasked with aggregating results fetched from multiple sources in response to a user query.
When aggregating the results, ensure they are relevant to the user's query and follow the given aggregation strategy.

User Query: "{user_query}"
Results: {results}
Aggregation Strategy: "{strategy}"

Instructions:
- Aggregate the provided results into a coherent and concise response.
- Assess the relevance of the results to the user's query.
- Provide a confidence score (0–100) indicating how relevant and accurate the aggregated answer is.
- Return the response as a properly formatted JSON object using the following structure:

{{
    "aggregated_results": "<your aggregated response here>",
    "confidence_score": <integer between 0 and 100>
}}
'''


EDITOR_PROMPT = """
You are an **Editor**. Improve factual faithfulness of the answer with respect to the provided Context.
### Question
{question}

### Context
{contexts}

### Current Answer
{answer}

### Rules
1. Correct only the wrong facts; don't invent new ones.
2. Return ONLY the revised answer text.
"""



response_generation_prompt = """
You are an expert AI assistant. You are given a context that is extracted from URLs provided by the Google Search engine with respect to a user query. 
User Query is given to you as well. 
Try to answer the query from the given context that may be coming from multiple URLs and pages. Be to the point and specific, replying with respect to the query given to you.

GUIDELINES:
- A clear and thorough explanation of the topic.
- Examples or use cases to illustrate your answer.
- Any relevant code snippets, formulas, or technical details.
- References or sources from the provided context, if available.
- Avoid assumptions; stick to the given context.
- Try to act like a real-time web RAG-based agent. Do not act like you were given a context and you are answering from it.

Context: "{context}"
User Query: "{query}"
Answer:
"""