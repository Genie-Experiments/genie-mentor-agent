# Standard library imports
import asyncio
import json
import os
import sys
from typing import Any, Dict, List, Optional
from dotenv import load_dotenv

# Third-party imports
from autogen_core import AgentId, MessageContext, RoutedAgent, message_handler
from autogen_core.models import UserMessage
from autogen_ext.models.openai import OpenAIChatCompletionClient
from pydantic import ValidationError

# Local application imports
from ..schemas.planner_schema import QueryPlan
from .message import Message, RefinerOutput


class RefinerAgent(RoutedAgent):
    def __init__(self, query_agent_id: AgentId) -> None:
        super().__init__('refiner_agent')
        self.query_agent_id = query_agent_id
        self.model_client = OpenAIChatCompletionClient(
            model='gpt-4o',
            api_key=os.getenv('OPENAI_API_KEY')
        )

    @message_handler
    async def handle_plan_message(self, message: Message, ctx: MessageContext) -> Message:

        # Step 1: Validate incoming JSON
        try:
            parsed_plan = QueryPlan.model_validate_json(message.content)
        except ValidationError as e:
            error_msg = f"Invalid QueryPlan format: {e}"
            print("[ERROR]", error_msg)
            return

        # Step 2: Determine if refinement is needed
        refinement_needed = await self.check_if_refinement_needed(message.content)
        if refinement_needed:
            print("[INFO] Refinement needed. Proceeding to refine.")
            raw_str = await self.refine_plan(message.content)
            result = RefinerOutput.model_validate_json(raw_str)
        else:
            print("[INFO] No refinement needed.")
            result = RefinerOutput(refined_plan=message.content, feedback="No changes needed.")

        # # Step 3: Forward to Query Agent
        response = await self.send_message(Message(content=result.refined_plan), self.query_agent_id)

        return response

    async def check_if_refinement_needed(self, plan_json: str) -> bool:
        prompt = f"""
        You are a refinement detector. A query plan is given below.
        
        Determine whether it needs refinement in terms of:
        - redundant or missing data sources
        - ambiguous execution order
        - unclear intent or subqueries
        - inappropriate aggregation strategy
        
        Plan:
        {plan_json}
        
        Respond with one word only: "Yes" or "No"
        """
        response = await self.model_client.create(
            messages=[UserMessage(content=prompt, source="planner_agent")],
        )
        content = response.content.strip().lower()
        return content.startswith("yes")

    async def refine_plan(self, plan_json: str) -> RefinerOutput:
        prompt = f"""
        You are a Refiner Agent responsible for reviewing and optimizing a query plan generated by another agent.
        
        Here is the input plan (as JSON):
        {plan_json}
        
        Check for:
        - redundant sources
        - poor execution ordering
        - missing query components
        - ambiguous subqueries or intent
        - better aggregation strategies
        
        Reply with a JSON object:
        {{
          "refined_plan": <refined JSON query plan>,
          "feedback": <what was changed and why; or 'No changes needed.'>
        }}
        """
        response = await self.model_client.create(
            messages=[UserMessage(content=prompt, source="planner_agent")],
            json_output=RefinerOutput
        )
        return response.content